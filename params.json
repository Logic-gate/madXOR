{"name":"Madxor","tagline":"Basic XOR functions","body":"madXOR\r\n======\r\n[![Build Status](https://travis-ci.org/Logic-gate/madXOR.png)](https://travis-ci.org/Logic-gate/madXOR)  \r\n\r\nPreform Basic XOR Operations \r\n***\r\n\r\nHow To\r\n---\r\n***\r\n**Encrypt** \r\n\r\n```\r\nIn [1]: import xor\r\nIn [2]: x = xor.Xor()\r\nIn [3]: x.encrypt(doc, output, key_out, entropy)\r\n```\r\n```\r\ndoc = file to encrypt\r\noutput = file to output encrypted data\r\nkey_out = file to write key\r\nentropy = Shannon Entropy to abide by - it will decrease by 0.1 at every failed attempt\r\n```\r\n*Example*\r\n```\r\nIn [4]: x.encrypt('index.html', 'encrypted_index.html', 'index.key', 7)\r\n```\r\n\r\n***\r\n**Decrypt** \r\n```\r\nIn [1]: import xor\r\nIn [2]: x = xor.Xor()\r\nIn [3]: x.decrypt(doc, key, decrypted_file)\r\n```\r\n```\r\ndoc = encrypted file\r\nkey = key to (+)\r\ndecrypted_file = file to write decrypted data \r\n```\r\n*Example*\r\n```\r\nIn [4]: x.decrypt('encrypted_index.html', 'encrypted_index.html', 'index.key', 7)\r\n```\r\n***\r\n**MadEncrypt** \r\n```\r\nIn [1]: import xor\r\nIn [2]: x = xor.Xor()\r\nIn [3]: x.MadEncrypt(doc, encryptedDoc, key_out, entropy, RubbishOutput, n, chunkSize, division_name, chunks, tarIN, tarName, tarkey)\r\n```\r\n```\r\ndoc = file to encrypt\r\nencryptedDoc = file to output encrypted data\r\nkey_out = file to write key\r\nentropy = Shannon Entropy to abide by - it will decrease by 0.1 at every failed attempt\r\nRubbishOutput = file to write rubbish - it will generate a footer 1/n the length of doc - see n\r\nn = int ^\r\nchunkSize = KB - divide encryptedDoc\r\ndivision_name = name of divided chunks\r\nchunks = chunks folder\r\ntarIN = tar to write chunks to\r\ntarName = name of encrypted tar\r\ntarkey = file to write tar key to\r\n```\r\n**What is Goinig on**\r\n```\r\n[doc (+) key_out(entropy)] + RubbishOutput(n) = encryptedDoc\r\nencryptedDoc / chunkSize = division_name(chunkSize)\r\ntar[division_name(chunkSize)] (+) tarkey = tarName\r\n```\r\n*Example-->From madEncrypt folder*\r\n```\r\nIn [4]: x.MadEncrypt('madEncrypt/madEncrypt_example.txt', 'madEncrypt/encrypted/madEncrypt_example.txt', 'madEncrypt/madEncrypt_example.key', 7, 'madEncrypt/madEncrypt_example.rubbish', 3, 1000, 'madEncrypt/chunks/madEncrypt', 'madEncrypt/chunks', 'madEncrypt/madEncrypt_example.tar','madEncrypt/encrypted/madEncrypt_example.tar', 'madEncrypt/madEncrypt_example_tar.key')\r\n```\r\n***\r\n**MadDecrypt** \r\n```\r\nIn [1]: import xor\r\nIn [2]: x = xor.Xor()\r\nIn [3]: x.MadDecrypt(division_name, noOfChunks, chunkSize, key, decrypted_file, tarName, tarkey, tarOut, tarOutFolder):\r\n```\r\n```\r\ndivision_name = name of divided chunks\r\nnoOfChunks = how many chunks are there - see info.txt at root path\r\nchunkSize = KB - divide encryptedDoc\r\nkey = key to decrypt with\r\ndecrypted_file = name of decrypted file\r\ntarName = name of encrypted tar\r\ntarkey = key to decrypt encrypted tar\r\ntarOut = name of decrypted tar\r\ntarOutFolder = name folder to write ecrypted data\r\n```\r\n\r\n*Example--> From madEncrypt folder*  \r\ndo not forget to delete the contents of chunks\r\n```\r\nIn [4]: x.MadDecrypt('madEncrypt/chunks/madEncrypt', 3, 1000, 'madEncrypt/madEncrypt_example.key', 'decrypted_example.txt', 'madEncrypt/encrypted/madEncrypt_example.tar', 'madEncrypt/madEncrypt_example_tar.key', 'madEncrypt/decrypted_example.tar', '.')\r\n```\r\n***\r\n\r\nNotes On xor_webpage\r\n---\r\nA video of xor_webpage in action  \r\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/fFiFOnOESL8\" frameborder=\"0\" allowfullscreen></iframe>\r\n***\r\nIn order for the example to work, you'll need to change line 25 in xor.py  \r\n```\r\ndef rand(self, size=[], chars=string.ascii_letters + string.digits + string.hexdigits + string.punctuation + string.whitespace)\r\n```\r\nTO\r\n```\r\ndef rand(self, size=[], chars=string.ascii_letters + string.digits)\r\n```\r\n***<https://github.com/Logic-gate/madXOR/issues/1>***  \r\n\r\n***\r\nTheory\r\n---\r\nThe final goal is to accomplish real-time XOR-communictation.  \r\n\r\n![Alt text](http://sysbase.org/xor.png \"Optional title\")  \r\n***Based on <http://penbang.sysbase.org/other_projects/simple_xor.pdf>***\r\n```\r\nwhere EN is the data to be encrypted and DE is the data to be decrypted\r\n```\r\n\r\nI am fully aware of the challenges that await me, especially since the container will be in clear-text.  \r\nCheck <http://penbang.sysbase.org/other_projects/simple_xor.pdf> for more info.","google":"UA-45752225-1","note":"Don't delete this file! It's used internally to help with page regeneration."}